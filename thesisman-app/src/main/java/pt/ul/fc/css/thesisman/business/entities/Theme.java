package pt.ul.fc.css.thesisman.business.entities;

import jakarta.persistence.*;
import org.springframework.lang.NonNull;
import pt.ul.fc.css.thesisman.business.enums.ThemeState;

import java.time.LocalDate;
import java.time.Month;
import java.util.ArrayList;
import java.util.List;

/**
 * @author 58180 Rodrigo Correia
 * @author 58188 Laura Cunha
 * @author 58640 Guilherme Wind
 *     <p>This class is used to represent a Theme that a student makes to a certain application.
 */
@Entity
@Inheritance(strategy = InheritanceType.SINGLE_TABLE)
public abstract class Theme {

  @Id
  @GeneratedValue(strategy = GenerationType.AUTO)
  private Long id;

  @NonNull private String year;

  @NonNull private String title;

  private String description;

  @NonNull @ManyToMany private List<MastersDegree> compatibleMasters = new ArrayList<>();

  @NonNull @ManyToOne private Teacher advisor;

  private @NonNull @Enumerated(EnumType.STRING) ThemeState state = ThemeState.AVAILABLE;

  private float remuneration;

  /**
   * Protected constructor required by JPA, initializes all {@code @NonNull} annotated attributes
   * with default values
   */
  protected Theme() {
    this.title = "title";
    this.advisor = new Teacher();
    this.year = calculateYear();
  }

  /**
   * Creates a new instance of a Theme with the specified {@code title} and {@code advisor}.
   *
   * @param title The title of this theme.
   * @param advisor The advisor of this theme.
   */
  public Theme(@NonNull String title, @NonNull Teacher advisor) {
    this.title = title;
    this.advisor = advisor;
    this.year = calculateYear();
  }

  private String calculateYear() {
    int year = LocalDate.now().getYear();
    Month month = LocalDate.now().getMonth();
    if(month.getValue() < 9)
      return (year - 1) +"/"+ year;
    else
      return year +"/"+ (year +1);
  }

  /**
   * Returns the id of this theme.
   *
   * @return The id generated by the database for this theme.
   */
  public Long getId() {
    return id;
  }

  /**
   * Returns the year given to this theme.
   *
   * @return The year of this theme.
   */
  public String getYear() {
    return year;
  }

  /**
   * Sets the year for this theme.
   *
   * @param year The year given to the theme by some advisor.
   */
  public void setYear(String year) {
    this.year = year;
  }

  /**
   * Returns the title given to this theme.
   *
   * @return The title of this theme.
   */
  public @NonNull String getTitle() {
    return title;
  }

  /**
   * Sets the title for this theme.
   *
   * @param title The title given to the theme by some advisor.
   */
  public void setTitle(@NonNull String title) {
    this.title = title;
  }

  /**
   * Returns the description given to this theme.
   *
   * @return The description of this theme.
   */
  public String getDescription() {
    return description;
  }

  /**
   * Sets the description for this theme.
   *
   * @param description The description given to the theme by some advisor.
   */
  public void setDescription(String description) {
    this.description = description;
  }

  /**
   * Returns all compatible masters.
   *
   * @return The compatible masters of this theme.
   */
  public @NonNull List<MastersDegree> getCompatibleMasters() {
    return compatibleMasters;
  }

  /**
   * Adds a given master to the list of compatible masters.
   *
   * @param master The master to be added.
   */
  public void addCompatibleMasters(@NonNull MastersDegree master) {
    this.compatibleMasters.add(master);
  }

  /**
   * Returns the current state of this theme
   *
   * @return The current state of the theme.
   */
  @NonNull
  public ThemeState getState() {
    return state;
  }

  /**
   * Sets the state of this theme.
   *
   * @param state The state of the theme.
   */
  public void setState(@NonNull ThemeState state) {
    this.state = state;
  }

  /**
   * Returns the remuneration of this theme.
   *
   * @return The remuneration of this theme.
   */
  public float getRemuneration() {
    return remuneration;
  }

  /**
   * Sets the remuneration for this theme.
   *
   * @param remuneration The remuneration given by the advisor.
   */
  public void setRemuneration(float remuneration) {
    this.remuneration = remuneration;
  }

  /**
   * Returns the advisor of this theme.
   *
   * @return The advisor for this theme.
   */
  public @NonNull Teacher getAdvisor() {
    return advisor;
  }

  /**
   * Sets the advisor for this theme.
   *
   * @param advisor The advisor given to this theme.
   */
  public void setAdvisor(@NonNull Teacher advisor) {
    this.advisor = advisor;
  }

  @Override
  public String toString() {
    return "Theme["
        + "id="
        + id
        + ", year="
        + year
        + ", title='"
        + title
        + ", description='"
        + description
        + ", compatibleMasters="
        + compatibleMasters
        + ", advisor="
        + advisor.toString()
        + ", remuneration="
        + remuneration
        + "]";
  }
}
